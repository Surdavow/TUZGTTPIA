using Godot;
using Godot.Collections;
using System;
using System.Collections;
using System.Diagnostics;
using System.Reflection.Metadata;

public partial class Player : CharacterBody3D
{
    public float Speed = 3f;
    
    [Export]
    public float airControl = 0.1f;
    [Export]
    public float runSpeed = 5f;
    [Export]
    public float walkSpeed = 3f;
    public float jumpVelocity = 3.5f;
    [Export]
    public float sensitivityHorizontal = 0.5f;
    [Export]
    public bool isRunning = false;
    public bool isLocked = false;
    public float sensitivityVertical = 0.5f;
    public Node3D cameraThirdPerson;
    public Node3D Visuals;
    public AnimationPlayer Animator;
    public AudioStreamPlayer3D soundPlayerSprint;
    public AudioStreamPlayer3D soundPlayerWalk;

    // Get the gravity from the project settings to be synced with RigidBody nodes.
    public float gravity = ProjectSettings.GetSetting("physics/3d/default_gravity").AsSingle();
    
    public override void _Ready()
    {
        Input.MouseMode = Input.MouseModeEnum.Captured;//Hide and lock the mouse
		cameraThirdPerson = GetNode<Node3D>("cameraMountThirdPerson");  
		Visuals = GetNode<Node3D>("Visuals");
		soundPlayerSprint = GetNode<AudioStreamPlayer3D>("soundPlayerSprint");
		soundPlayerWalk = GetNode<AudioStreamPlayer3D>("soundPlayerWalk");
		Animator = GetNode<AnimationPlayer>("Visuals/alpha/AnimationPlayer");
    }

    public void playFootsteps()
    {
        if (IsOnFloor()) 
        {
            if (isRunning) soundPlayerSprint.Play();
            else soundPlayerWalk.Play(); // Assuming soundPlayerWalk is the AudioStreamPlayer3D for walking.        
        }
    }


    public override void _Input(InputEvent @event)
    {
        if (@event is InputEventMouseMotion mouseMotionEvent)
        {
            RotateY(Mathf.DegToRad(-mouseMotionEvent.Relative.X * sensitivityHorizontal));
            cameraThirdPerson.RotateX(Mathf.DegToRad(-mouseMotionEvent.Relative.Y * sensitivityVertical));
            Visuals.RotateY(Mathf.DegToRad(mouseMotionEvent.Relative.X * sensitivityHorizontal));
        }
    }

    public override void _PhysicsProcess(double delta)
    {
        Vector3 velocity = Velocity;
        if (!Animator.IsPlaying()) isLocked = false;
        
        if (IsOnFloor() && !isLocked && Input.IsActionJustPressed("melee"))
        {
            string randomAnimation = "punch_long";//Initialize this first
            switch (GD.Randi() % 4)
            {
                case 1: randomAnimation = "punch_left";
                        break;
                case 2: randomAnimation = "punch_right";
                        break;
                case 3: randomAnimation = "punch_long";
                        break;      
                default: break;    
            }            
            
            if (Animator.CurrentAnimation != randomAnimation) Animator.Play(randomAnimation);
            
            isLocked = true;
        }

        switch (Input.IsActionPressed("sprint"))        
        {
            case true:  Speed = runSpeed;
                        isRunning = true;
                        break;
            case false: Speed = walkSpeed;
                        isRunning = false;
                        break;
        }

        // Get the input direction and handle the movement/deceleration.
        // As good practice, you should replace UI actions with custom gameplay actions.
        Vector2 inputDir = Input.GetVector("move left", "move right", "move forward", "move backward");
        Vector3 direction = (Transform.Basis * new Vector3(inputDir.X, 0, inputDir.Y)).Normalized(); 
        
        if (direction != Vector3.Zero)
        {
            if (!isLocked && IsOnFloor())
            {
                switch(isRunning)
                {
                    case true:  if (Animator.CurrentAnimation != "sprint") Animator.Play("sprint");
                                break;
                    case false: if (Animator.CurrentAnimation != "walk") Animator.Play("walk");
                                break;
                }
            }
                velocity.X = direction.X * Speed;
                velocity.Z = direction.Z * Speed;
        }
        else
        {
            velocity.X = Mathf.MoveToward(Velocity.X, 0, Speed);
            velocity.Z = Mathf.MoveToward(Velocity.Z, 0, Speed);

            if (IsOnFloor() && !isLocked && Animator.CurrentAnimation != "idle") Animator.Play("idle");                
        }

        // Add the gravity.
        if (!IsOnFloor()) velocity.Y -= gravity * (float)delta;

        // Handle Jump.
        if (Input.IsActionJustPressed("jump") && IsOnFloor())
        {
            velocity.Y = jumpVelocity;
            if (Animator.CurrentAnimation != "jump") Animator.Play("jump");
        }        

        Velocity = velocity;            
        if (!isLocked) MoveAndSlide();
    }
}
